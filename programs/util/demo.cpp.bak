#include <iostream>
#include <string>

<<<<<<< Updated upstream
#include <fc/crypto/elliptic.hpp>
#include <fc/io/json.hpp>
=======

//#include <fc/crypto/elliptic.hpp>
//#include <steem/utilities/key_conversion.hpp>
//#include <steem/protocol/hardfork.hpp>
//#include <steem/chain/steem_object_types.hpp>

#include <steem/protocol/types.hpp>
#include <steem/protocol/transaction.hpp>
>>>>>>> Stashed changes
#include <steem/utilities/key_conversion.hpp>

#include <fc/io/json.hpp>
#include <fc/io/raw.hpp>
#include <fc/variant.hpp>
#include <fc/crypto/sha256.hpp>
#include <fc/reflect/reflect.hpp>


using namespace std;
using namespace steem::protocol;
using namespace fc::raw;

class debug_encoder : public fc::sha256::encoder {
	public:
		void write( const char* d, uint32_t dlen ) {
			for(int i = 0; i < (int)dlen; i++){
				auto v = (int)(*(d+i)) & 0xff;
				cout << v << " ";
			}
			cout << " " << dlen << endl;
			fc::sha256::encoder::write(d, dlen);
		}
};

struct ObjC {
  bool is_ok;
};

// 特殊类型，将一个json中的value转为一个对象
void to_variant(const ::ObjC &v, fc::variant &vo) {
// 将 ObjC 映射为一个字符串
  if (v.is_ok) {
    vo = std::string("ok");
  } else {
    vo = std::string("not ok");
  }
}

void from_variant(const fc::variant &vo, ::ObjC &v) {
  auto value = vo.as<std::string>();
  if (value == "ok") {
    v.is_ok = true;
  }
}

// 特殊类型，反射声明
FC_REFLECT_TYPENAME(::ObjC)

// 普通类型，直接按以下格式声明即可，类似于go json.Marshal，走"反射"。
struct ObjB {
  int64_t b_value;
  std::vector<int64_t> BValue;
};

struct ObjA {
  std::string aa;
  std::string AA;
  ObjB bb;
  ObjC cc;
  int64_t internal; // 未使用FC_REFLECT声明，不参与json序列化。
};

// 对Object进行反射声明，成员用()分隔
FC_REFLECT(::ObjB, (b_value)(BValue))
FC_REFLECT(::ObjA, (aa)(AA)(bb)(cc))

int main(int argc, char **argv) {
<<<<<<< Updated upstream
  auto priv_key = fc::ecc::private_key::regenerate(fc::sha256::hash(std::string(argv[1])));
  auto pub_key = priv_key.get_public_key();
  auto pub_key_type = steem::protocol::public_key_type(pub_key);
  auto pub_key_str = std::string(pub_key_type);
  std::cout << steem::utilities::key_to_wif(priv_key) << std::endl;
  std::cout << pub_key_str << std::endl;

  std::cout << "=== JSON DEMO ===" << std::endl;
  ObjA oa0;
  oa0.aa = "aa field is aa";
  oa0.AA = "AA field is AA";
  oa0.bb.b_value = 1000;
  oa0.bb.BValue = {0, 1, 2, 3, 4};
  oa0.cc.is_ok = true;
  oa0.internal = 1;
  auto ss = fc::json::to_string(oa0);
  std::cout << "fc::json::to_string(oa) = " << ss << std::endl;

  auto decoded = fc::json::from_string(ss);
  auto oa1 = decoded.as<::ObjA>();
  FC_ASSERT(oa1.cc.is_ok == oa0.cc.is_ok);
=======
    //auto priv_key = fc::ecc::private_key::regenerate(fc::sha256::hash(std::string(argv[1])));
	auto wif = "5JzpcbsNCu6Hpad1TYmudH4rj1A22SW9Zhb1ofBGHRZSp5poqAX";
	auto priv_key = steem::utilities::wif_to_key(wif);
	auto pub_key = priv_key->get_public_key(); 
	//auto pub_key_type = public_key_type(pub_key);
	auto pub_key_str = pub_key.to_base58();
    //std::cout << steem::utilities::key_to_wif(priv_key) << std::endl;
    std::cout << pub_key_str  << std::endl;
	auto tx = fc::json::from_file("/data0/steem/programs/util/new_account.json.2").as<signed_transaction>();
	//asset fee = asset(9, STEEM_SYMBOL);
	//debug_encoder enc;
	//account_create_operation op = tx.operations[0].get<account_create_operation>();
	// steem::protocol::authority::key_authority_map amap;
	 public_key_type pkt("STM6kbKsZj5kY5QrG8huATPtwfVmZmKzFDfUXz1eEbKYF58LorAxF");
	// auto owner = op.owner;
	auto chain_id_str = "2ac122bd70a2f74d6f761c331f4c4da1028b783cc185d23bf5449ac5af49e198";
	auto chain_id = fc::sha256(chain_id_str);
	auto d = tx.sig_digest(chain_id);
	cout << "digest in main:" << d.str() << endl;
	auto sig = tx.signatures[0];
	auto recPubKey = fc::ecc::public_key(sig,d);
	auto pubKeyType = public_key_type(recPubKey);
	cout << "recover public key:" <<  fc::json::to_string(pubKeyType) << endl;
	cout << "----------------" << endl;
	auto sigs  = tx.get_signature_keys(chain_id);
	cout << "================" << endl;
	for(auto& sig : sigs) {
		cout << "get signatures key:"  << fc::json::to_string(sig) << endl;
	}
	authority owner(1, pkt, 1);
	auto get_active  = [&]( const string& name ) { return owner; };
	auto get_owner = [&]( const string& name ) { return owner; };
	auto get_posting = [&]( const string& name ) { return owner; };
	tx.verify_authority(chain_id, get_active, get_owner, get_posting);
	//pack(enc, chain_id);
	//pack(enc, tx);
	//auto pstr = enc.result().str();
	//cout << tx.ref_block_num << endl;	
	//cout << pstr << endl;
>>>>>>> Stashed changes
}
